Fußball

- Attribute, Instanzvariablen, private, Konstruktoren -
Es ist in mehreren Schritten eine Konsolenanwendung für einen rudimentären Fußballmanager zu implementieren. Ziel der Anwendung ist es, zwei Mannschaften gegeneinander antreten zu lassen und dabei unter Berücksichtigung einiger Einflussparameter zufallsbestimmt das Spielgeschehen einschließlich der Tore zu simulieren. Die Implementierung der Anwendung soll objektorientiert erfolgen.
In objektorientierten Anwendungen wird der jeweilige Ausschnitt der Realität, den die Anwendung modellieren soll, mithilfe von Objekten abgebildet. Diese Objekte interagieren über den Austausch von Nachrichten miteinander, d.h. sie rufen wechselseitig Methoden voneinander auf. In einem Fußballmanager wären solche Objekte beispielsweise Trainer, die Mannschaften trainieren; Mannschaften, die wiederum aus Spielern wie Torhüter oder Feldspielern bestehen und gegeneinander spielen oder aber auch ein Stadion, in dem Fußballspiele ausgetragen werden. Wie du bereits weißt, werden Objekte aus Klassen mit Hilfe des new-Operators instanziiert. Ein Beispiel wäre die Instanziierung der Klasse GameOfLife:
GameOfLife game = new GameOfLife();
Klassen stellen so etwas wie eine Vorlage zur Erzeugung von Objekten dar. Man kann sie auch als Bauplan von Objekten auffassen. Sie definieren über Methoden, welches Verhalten die Objekte dieser Klassen besitzen; definieren also, was ein Client mit einem solchen Objekt anfangen kann. Auch das hast du bereits zur Genüge getan, indem du in den Repositorys zu den Kontrollstrukturen die (vordefinierten) Methoden in den einzelnen Klassen ausimplementiert hast. In der Klasse GameOfLife hast du beispielsweise die Methode simulate() codiert, die das Leben einer Generation von Zellen simuliert. Ein Client kann dieses Verhalten von GameOfLife-Objekten durch Methodenaufruf nutzen:
game.simulate();
Klassen legen allerdings nicht nur das Verhalten von Objekten fest, sondern auch deren Eigenschaften. Ein Trainer in einem Fußballmanager hat beispielsweise einen Namen, ein Alter und einen Erfahrungswert beim Trainieren von Mannschaften. Solche Eigenschaften heißen in der objektorientierten Welt Attribute und werden über sogenannte Instanzvariablen realisiert. 

1)	Lege ein neues Javaprojekt mit dem Namen Soccer-Manager an.  Lege im src-Ordner ein Package mit dem Bezeichner de.szut.soccer und darin eine Klasse mit dem Bezeichner Coach an. 

2)	Gib den unten abgebildeten Quellcode ein.
public class Coach {
    private String name;
    private int age;
    private int experience;
}

Wie du siehst, sind Eigenschaften oder Attribute einer Klasse nichts anderes als Variablen, die wie immer mit ihrem Datentyp und Bezeichner deklariert werden. Versehen werden sie üblicherweise mit dem Modifizierer private, so dass auf diese so genannten Instanzvariablen von außerhalb der Klasse Coach nicht zugegriffen werden kann. Auf diese Weise wird im Rahmen der Kapselung die Logik der Implementierung eines Objekts nach außen hin verborgen (Geheimnisprinzip), so dass diese Logik später erweitert oder ausgetauscht werden kann, ohne dass andere Module, die die Klasse Coach benutzen, verändert werden müssen. Die Erfahrung des Trainers wird über eine ganze Zahl aus dem Intervall 1 (unerfahren) bis 10 (Trainerfuchs) modelliert. 

3)	Klassen besitzen neben Instanzvariablen und Methoden noch ein drittes Element. Der sogenannte Konstruktor wird beim Instanziieren eines Objektes aufgerufen:
Coach rehhagel = new Coach();
Konstruktoren dienen dazu, neue Objekte einer Klasse zu erzeugen bzw. zu „konstruieren“. Sie reservieren den für das zu instanziierende Objekt benötigten Speicher, legen danach im Speicher die entsprechenden Felder an und initialisieren diese. Da jede Klasse im Prinzip nichts anderes darstellt als ein Bauplan zur Erzeugung von Objekten, benötigt jede Klasse mindestens einen Konstruktor, der diesen Bauplan auch tatsächlich anwenden kann. In Java besitzen alle Klassen automatisch einen Standardkonstruktor, der nicht eigens definiert werden muss und der alle Instanzvariablen mit dem Default-Wert initialisiert. Dieser wurde zur Instanziierung des Trainers „rehhagel“ im Beispiel oben verwendet. Der Standardkonstruktor hat folgenden Code:
public Coach() {
}
Wie du siehst, hat er denselben Bezeichner wie die Klasse und ist syntaktisch mit einer Methode vergleichbar, die keinen Rückgabetyp besitzt. Das ist kennzeichnend für alle Konstruktoren. Der Zugriffsmodifikator public wird benötigt, um ein Coach-Objekt von außerhalb der Klasse zu erzeugen. Zusätzlich zur Objektinstanziierung können Konstruktoren auch die Aufgabe übernehmen, die Instanzvariablen des erzeugten Objekts mit Anfangswerten zu belegen. In solchen Fällen erhält der Konstruktor Parameter, deren Werte er dann in die Instanzvariablen speichert. Unsere Klasse Coach soll einen Konstruktor erhalten, der alle Attribute initialisiert:
public Coach(String name, int age, int experience) {
    this.name = name;
    this.age = age;
    this.experience = experience;
}
Das Schlüsselwort this referenziert das aktuelle Objekt, sorgt also dafür, dass der jeweilige Wert aus den Parametern auch in den jeweiligen Instanzvariablen gespeichert wird und nicht im Parameter verbleibt. Da nun explizit ein Konstruktor definiert wurde, ist der Standardkonstruktor nicht mehr erreichbar. Soll es weiterhin einen Standardkonstruktor geben, so müsste er definiert werden. Wir begnügen uns aber mit dem parametrisierten Konstruktor.

4)	Das Attribut experience darf keine Werte außerhalb des Intervalls 1 bis 10 annehmen. Wir könnten das durch entsprechende If-Anweisungen innerhalb des Konstruktors sicherstellen. Das verhindert aber die Wiederverwendbarkeit dieser Logik. Daher lagern wir sie in eine Methode mit der Signatur public int validate(int value) aus, die 10 zurückgibt sofern ihr ein Wert größer 10 und 1 sofern ihr ein Wert kleiner 1 übergeben wird. Liegt der Parameter im Intervall 1 bis 10 wird dieser zurückgegeben.

5)	Rufe die Methode validate() im Konstruktor geeignet auf.  

6)	Zur Ausgabe der Attributwerte auf der Konsole benötigen wir später eine Methode, die das tut. Dazu bietet es sich an, die toString()-Methode zu überschreiben. Diese besitzt jede Klasse zwar automatisch, gibt aber selten sinnvolle Ergebnisse zurück. Überschreibe sie daher wie folgt:
@Override
public String toString() {
    return "\nCoach\n" +
            "name: " + this.name +
            "\nage: " + this.age +
            "\nexperience: " + this.experience;
}
Das Schöne an der toString()-Methode besteht darin, dass sie nicht mit dem Objektbezeichner und dem Punktoperator aufgerufen werden muss, sondern der Objektbezeichner direkt in der System.out.println-Anweisung verwendet werden kann:
statt
System.out.println(rehhagel.toString());
System.out.println(rehhagel);

7)	 Implementiere analog zur Klasse Coach die Klasse Player. Dabei sind folgende Anforderungen umzusetzen: Spieler besitzen wie der Trainer einen Namen und ein Alter, darüber hinaus auch eine Stärke, die Härte ihres Torschusses, eine Motivation (alle im Intervall 1-10) und die Anzahl der geschossenen Tore. Stärke, Torschuss und Motivation werden ebenfalls auf einer Skala von 1 bis 10 gemessen. Ein Spieler besitzt die Methode public int shootAtGoal(), die die Schusshärte, mit der der Spieler auf das Tor schießt, als int-Wert zurückgibt. Dabei ist zu berücksichtigen, dass die Härte des Torschusses zufallsbestimmt um max +1 nach oben und max um -2 nach unten von der Torschussfähigkeit des Spielers abweichen kann. Berücksichtige ebenfalls, dass die Torschusshärte nicht kleiner 1 und größer 10 sein kann. Außerdem hat ein Spieler eine Methode public void addGoal(), die die Anzahl der Tore um eins heraufsetzt. Es soll wiederum die Möglichkeit geben, die Attributwerte über die toString()-Methode auf der Konsole auszugeben. Spielerobjekte sollen über einen parametrisierten Konstruktor instanziiert werden können. Bei der Implementierung kannst du dich auch an das unten abgebildete UML-Klassendiagramm halten. Attribute werden in Klassendiagrammen immer im oberen Quadrat angegeben, der Modifizierer private mit einem Minuszeichen dargestellt. Im unteren Bereich werden optional Konstruktoren, auf jeden Fall aber alle Methoden angegeben. Der Modifizierer public wird mit einem Pluszeichen dargestellt, die Rückgabetypen der Methoden werden hinter dem Methodennamen nach einem Doppelpunkt angegeben. Die Hilfsmethode validate()kennst du bereits aus der Klasse Coach. Sie validiert, ob die Attribute und die Torschusshärte in der Methode shootAtGoal() im Intervall von 1 bis 10 liegen. Übernimm den Quellcode aus der Klasse Coach. Das dupliziert zwar den Quellcode. Wir werden aber später ein entsprechendes Refactoring durchführen. 
	
8)	Implementiere zum Testen deiner Anwendung eine Klasse SoccerManagerUI mit einer main-Methode. Instanziiere ein Trainer- und ein Spielerobjekt und rufe jeweils die toString()-Methode auf. Rufe auf deinem Spieler ebenfalls die Methode shootAtGoal() auf und gib die ermittelte Torschusshärte auf der Konsole aus. 

9)	Das händische Testen ist durchaus umständlich. Um wirklich alle Fehler ausschließen zu können, die schon in unserer Grundversion auftreten können, müsste man die Klasse SoccerManagerUI sehr umfangreich implementieren: es bräuchte mindestens drei verschiedene Instanziierungen der Klasse Coach, nämlich eine mit einer Erfahrung, die im Intervall von 1 bis 10 liegt, eine, die über 10 und eine, die unter 1 liegt wird. Beim Spieler ergäben sich noch weitere Variationen. Außerdem müsste man die main-Methode häufiger ausführen, um die Methode shootAtGoal() zu testen, nämlich so oft, bis alle drei möglichen Fälle eintreten (Torschuss mit unveränderter, mit nach oben abweichender und nach unten abweichender Härte). Wir wollen daher unsere Klasse automatisiert testen.

10)	Dafür sind folgende Vorarbeiten nötig: a) Lege im Hauptverzeichnis deines Projektes (auf derselben Ebene wie die des Ordners src) einen Ordner mit dem Bezeichner test an, b) markiere diesen als Test-Ressource, indem du ihn mit rechts anklickst, im Kontextmenü Mark Directory as – Test Sources Root auswählst, c) ein Package mit dem Bezeichner de.szut.soccer1 (derselbe Package-Name, in dem deiner Klassen Coach und Player liegen!) und d) eine Klasse mit dem Bezeichner CoachTest anlegst.

11)	Des Weiteren benötigen wir in der Klasse Coach einen Getter für die Erfahrung. Lege diesen an.

12)	Gib in der Klasse CoachTest folgenden Code ein:

@Test
public void givenExperienceLowerHigher10_WhenValidate_Return10(){
    Coach rehhagel = new Coach("Rehhagel", 84, 11);
    assertEquals(10, rehhagel.getExperience());
}

Die Annotation @Test wird dir als Fehler markiert. Das liegt daran, dass JUnit 5 dem Classpath hinzugefügt werden muss. Stell den Cursor in die Annotation und drücke gleichzeitig Alt+Enter, wähle dann JUnit 5 (nicht JUnit 4) aus. Auch assertEquals wird dir als Fehler markiert. Diese Methode muss auf demselben Weg importiert werden. Danach kannst du den Test ausführen.
Jeder Unit-Test in Java muss mit der Annotation @Test versehen werden, um die Methode als Test bekannt zu machen. Jeder Test hat automatisch die Signatur public void. Für die Benennung der Tests gibt es viele Konventionen. Im Beispiel wurde die Given-When-Then-Konvention benutzt. Sie gibt die Ausgangssituation, die Methode, die getestet wird und das erwartete Ergebnis an. Du kannst auch eine andere Benennung wählen. Aus ihr sollte aber in jedem Fall eine sprechende Beschreibung des Testfalles hervorgehen. Die Methode assertEquals() ist eine sogenannte Assertion. Sie prüft, ob das erwartete Ergebnis (10) dem entspricht, was getExperience() zurückgibt. Die Reihenfolge der Parameter ist ein wenig gewöhnungsbedürftig: es wird immer erst das erwartete Ergebnis und dann das tatsächliche Ergebnis aus dem Methodenaufruf übergeben. 

13)	Schreibe für die zwei noch offenen Testfälle jeweils einen Unit-Test und führe diese aus: givenExperienceLowerThan10_WhenValidate_Return1()
und 
givenExperience7_WhenValidate_Return7 ()

14)	Lege im selben Package wie oben die Klasse PlayerTest an. Wir wollen noch die Methode addGoal() testen. Schreibe dazu einen Test mit dem Bezeichner givenShootGoal_whenAddGoal_ReturnUpdatedNumberOfGoals(), der einen Spieler instanziiert, die Methode addGoal() aufruft und überprüft ob, die Anzahl der Tore um eins erhöht worden ist (hierfür brauchst du einen entsprechenden Getter!). 

15)	Eigentlich müssten wir an dieser Stelle auch die Methode shootAtGoal() testen. Sie besitzt allerdings eine Abhängigkeit zu einem Random-Objekt, das auch noch innerhalb der Methode instanziiert wird. Um diese Methode testen zu können, müssten wir größere Umbauarbeiten am Code vornehmen und Random mocken, was innerhalb einer Einführung in die Objektorientierung zu viel des Guten wäre. Die Funktionsweise der validate-Methode wollen wir hier nicht noch einmal testen. Wie versprochen, wird die Code-Duplizierung ja auch noch refactored.

16)	Lese zur Verfestigung das Infoblatt „01 IB Konstruktoren.docx“.


-----------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------
Teil 2

Unser Fußballmanager soll um eine Klasse erweitert werden, die Torhüter modelliert. Ein Torhüter besitzt dieselben Eigenschaften wie ein Spieler (Name, Alter, Stärke, Torschusshärte, Motivation und Anzahl der geschossenen Tore). Ja – auch er könnte Tore schießen, gab es ja schon das ein oder andere Mal… Zusätzlich hat der Torwart aber auch eine Eigenschaft Reaktionsfähigkeit, mit der er Torschüsse abwehrt. Wie bei vielen Eigenschaften des Spielers wird auch diese Eigenschaft durch eine Zahl im Intervall von 1 bis 10 dargestellt. Außerdem besitzt er eine Methode public boolean ballHold(int powerAtGoalKick). Diese Methode ermittelt die Reaktionsfähigkeit des Torhüters, die zufallsbestimmt um 1 nach oben und 1 nach unten abweichen kann, und gibt zurück, ob der Torhüter den Schuss des Spielers gehalten hat. Ist die Reaktion des Torhüters größer oder gleich der übergebenen Torschuss-härte des schießenden Spielers, hält der Torhüter den Schuss und die Methode gibt true zurück, an-dernfalls false.

Bei der Implementierung der Klasse Goalkeeper deckt sich damit ein Großteil des Codes mit der der Klasse Player. Alle Attribute des Players sowie Teile des Konstruktors und der toString()-Methode wä-ren erneut zu implementieren. Um dir Schreibarbeit zu sparen, wäre Copy-Paste zwar eine Hilfe, aller-dings sprechen einige gewichtige Gründe gegen eine solche Codeduplizierung. Ist der duplizierte Quellcode fehlerhaft oder muss später geändert werden, so muss diese Änderung überall in der An-wendung vorgenommen werden, an denen sich der Code wiederholt. Das macht die Wartung der An-wendung nicht nur aufwendiger, weil Stellen vergessen werden können, sondern auch fehleranfälliger.

Die Lösung des Problems besteht darin, die Klassen Player und Goalkeeper durch eine Vererbungsbeziehung zu verknüpfen. Ein Torhüter ist nämlich ein spezieller Spieler: Er besitzt alle Eigen-schaften und Verhaltensweisen eines Spielers und darüber hinaus die nur ihn auszeichnende Reaktionsfähigkeit und das Verhalten, Schüsse auf das Tor hal-ten zu können. In der Programmierung spricht man in einem solchen Fall von ei-ner Erweiterung bzw. Spezialisierung. Man sagt auch, der Torwart erbt vom Spieler, das heißt, er hat all das, was ein Spieler auch hat. Die Klasse Player wird in einer solchen Vererbungshierarchie als Superklasse oder Basisklasse, Goalkeeper als Kindklasse bezeichnet.

1) Kopiere das Package de.szut.soccer und nenne die Kopie de.szut.soccer2.

2) Erstelle eine neue Klasse Goalkeeper. Damit sie von Player erbt, erweitere die Klassendefini-tion um das Schlüsselwort extends und Player:

public class Goalkeeper extends Player{ }

Damit ist die Vererbungshierarchie erstellt. Auch wenn im Quellcode jetzt Fehler angezeigt wer-den. Um diese kümmern wir uns im Folgenden.

3) Deklariere die Instanzvariable reaction, um die Reaktionsfähigkeit des Torwarts beim Abweh-ren von Torschüssen zu modellieren. Die Reaktion wird mit einem ganzzahligen Wert im Intervall von 1 (schlecht) bis 10 (super) angegeben.

4) Implementiere nun die toString()-Methode. Hier wird dir auffallen, dass du keinen Zugriff auf Eigenschaften eines Spielers hast, obwohl du diese ja eigentlich erben willst. Dies liegt am private-Modifikator vor den Eigenschaften der Klasse Player, der den Zugriff auf die Attribute von au-ßerhalb der Klasse Player verbietet. Besser wäre hier der Modifizierer protected, da dieser immer noch vor Zugriff von außen schützt, jedoch den erbenden Klassen den direkten Zugriff auf die Instanzvariablen erlaubt. Ändere also die Zugriffsmodifikatoren der Attribute der Klasse Player von private auf protected!

5) Implementiere die Methode public boolean ballHold(int powerAtGoalKick) mit der in der Einleitung beschriebenen Funktionalität. Damit die Reaktionsfähigkeit des Torhüters in-nerhalb des Intervalls von 1 bis 10 bleibt, nachdem sie zufallsbestimmt angepasst worden ist, be-nötigst du die Methode validate(), die eine ermittelte Reaktionsfähigkeit von 0 auf 1 oder eine von 11 auf 10 setzt. Ändere daher den Modifizierer dieser Methode in der Klasse Player auf protected, damit sie innerhalb der Klasse Goalkeeper verwendet werden kann.

6) Wie die Klasse Player benötigt auch die Klasse Goalkeeper einen Konstruktor. In einer Klassen-hierarchie haben in der Regel Basisklassen und abgeleitete Klassen Konstruktoren. Daraus ergibt sich die Frage, welcher Konstruktor für die Erstellung eines Objektes der abgeleiteten Klasse ver-antwortlich ist. Die Antwort lautet: Der Konstruktor der Superklasse erzeugt den Objektteil der Superklasse, der Konstruktor für die Kindklasse erzeugt den Anteil der Kindklasse. Daher muss der Konstruktor der abgeleiteten Klasse den Konstruktor der Basisklasse aufrufen. Das geschieht mit dem Java-Schlüsselwort super (vgl. Abbildung unten). Der Konstruktor der Klasse Goalkeeper soll parametrisiert sein. Da der Torhüter bei seiner Erzeugung noch kein Tor geschossen hat, soll dieses Attribut automatisch mit 0 initialisiert werden:

public Goalkeeper(String name, int age, int force, int powerAtGoalKick, int motivation, int reaction) {
super(name, age, force, powerAtGoalKick, motivation, 0);
this.reaction = reaction;
}

7) Instanziiere in deiner main-Methode zum Testen einen Torhüter und rufe die toString()-Me-thode in einer Konsolenausgabe auf. Simuliere einen Torschuss und eines Spielers und gib aus, ob der Torhüter den Ball gehalten hat, oder nicht.

Damit ist die Spezialisierung eines Spielers zum Torwart realisiert und getestet. Was ist nun durch die Verwendung einer Vererbungshierarchie gewonnen? Insgesamt lassen sich vier Vorteile festhalten. Durch den Einsatz von Vererbung wurde Codeduplizierung vermieden. Gleiche oder weitestgehend ähnliche Quelltextabschnitte mussten nicht doppelt oder mehrfach geschrieben werden. Dadurch wird eine Anwendung einfacher zu warten, weil eine Änderung an Datenfeldern oder Methoden, die von mehreren Subklassen geteilt werden, nur an einer Stelle vorgenommen werden muss. Diese Stelle ist nun für den Wartungsprogrammierer in der Regel aufgrund der hierarchischen Struktur leicht zu fin-den. Die Wiederverwendbarkeit unseres Codes wird durch Vererbung erhöht. Der Code unserer Klasse Player wurde durch Vererbung für die Klasse Goalkeeper genutzt und kann für andere Arten von Spielern wie Mittelfeldspielern oder Angreifern wiederverwendet werden, indem von Player vererbt wird. Das gilt allgemein: Immer dann, wenn bereits eine Klasse existiert, die den Anforderungen sehr nahe kommt, kann eine Subklasse dieser Klasse geschrieben werden, die den bestehenden Code spe-zialisiert. Viertens war es für uns sehr einfach, die bestehende Anwendung durch den Gebrauch von Vererbung zu erweitern.

8) Lese zur Verfestigung das Infoblatt „02 IB Vererbung.docx“.

--------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------
Teil 3

Unser Code weist nach wie vor Code-duplizierung auf. Mit dem Namen und das Alter haben Trainer und Spieler gemeinsame Eigenschaften, die jeweils in den Klassen Coach und Player implementiert worden sind. Die Lösung dafür heißt Generalisie-rung. Das bedeutet, die gemeinsa-men Eigenschaften beider Klassen werden in einer neuen Klasse zusam-mengefasst. Auch dabei handelt es sich um eine Vererbung, also um eine Ist-Ein-Beziehung: Ein Spieler ist eine Person; ein Trainer ist eine Per-son. Die Klassen Player und Coach erben also von einer neu zu erstellenden Klasse Person. Unsere Vererbungshierarchie bekommt auf diese Klasse, die nur dazu dient, Subklassen gemeinsame Attribute zu vererben. Die im Folgenden zu implementierenden Änderungen können anhand des abgebildeten Klassendiagramms nachvollzogen werden.

1) Kopiere das Package de.szut.soccer2 und nenne die Kopie de.szut.soccer3.

2) Erstelle im Package de.szut.soccer3 eine neue Klasse mit dem Namen Person. Füge der Klasse Person Attribute für die Eigenschaften Name und Alter hinzu. Wähle den sogenannten Zugriffsmodifizierer wieder so, dass auch aus allen erbenden Klassen direkt auf diese beiden Attri-bute zugegriffen werden kann.

3) Implementiere außerdem einen parametrisierten Konstruktor.

4) Öffne nun die Klasse Coach und entferne die Attribute für den Namen und das Alter. Nimm am Konstruktor keine Veränderungen vor. Jetzt werden einige Fehler angezeigt. Diese sind erst einmal unerheblich.

5) Ein Trainer ist eine Person – eine spezielle Person. Das bedeutet, er hat und kann alles das, was eine Person auch hat und kann. In unserem Fall sind das der Name und das Alter. Man sagt, der Trainer erbt von Person. Zusätzlich hat er aber auch Eigenschaften, die eine normale Person nicht hat. In unserem Fall ist das die Erfahrung. Damit der Trainer auch in unserem Programm eine Per-son ist bzw. von der Klasse Person erbt, ergänze die Klassendefinition der Klasse Coach wie folgt:

public class Trainer extends Person { … }

Dies sollte zwei Fehler beseitigen und einen neuen Fehler schaffen

6) Nun wenden wir uns dem Konstruktor von Coach und damit dem dort angezeigten Fehler zu. Dies liegt daran, dass der Coach zwar von Person erbt, aber an keiner Stelle den Konstruktor seiner Basisklasse Person aufruft. Dies lässt sich leicht ändern und gleichzeitig sparen wir noch eine Zeile Code ein. Rufe im Konstruktor der Klasse Coach den Konstruktor von dessen Basisklasse Person auf und übergib die entsprechenden Attribute.

7) Die Klasse Coach ist fertig. Nun fehlt nur noch das Refactoring der Klasse Player. Gehe dabei wie bei der Klasse Coach vor.

8) In unserem Spiel soll es nur Spieler, Torhüter und Trainer geben – aber keine "normalen" Personen. Das bedeutet, von der Klasse Person soll keine Instanz erzeugt werden. Um dies zu erreichen, wird die Klasse Person als abstrakt definiert. Erweitere dafür die Klassendefinition um das Schlüs-selwort abstract:

public abstract class Person { … }

Schaue noch einmal auf das Klassendiagramm auf der vorigen Seite. Dort ist zu erkennen, dass der Bezeichner Person kursiv geschrieben ist. Kursive Klassenbezeichner markieren in UML-Klassen-diagrammen abstrakte Klassen!

9) Teste abschließend dein Refactoring, indem du den bereits fertigen Code aus der main-Funktion ausführst. Versuche dann die Klasse Person zu instanziieren. Und – lässt sich eine Instanz erzeu-gen? Hoffentlich nicht!

--------------------------------------------------------------------------
--------------------------------------------------------------------------
Teil 4

Mit der Abbildung der am Spiel beteiligten Personen ist es leider nicht getan. Für die Simulation benö-tigen wir zwei Mannschaften, die in einem Spiel auf einander treffen. Zu einer Mannschaft gehören ein Trainer, ein Torwart und zehn Feldspieler. Die Mannschaft ist also auch ein Objekt, das wir realisie-ren müssen. Sie steht mit den Klassen Coach, Goalkeeper und Player in Beziehung. Diese Art von Be-ziehung zwischen zwei Objekten, wie wir sie hier haben, nennt man Hat-Ein-Beziehung, spezieller As-soziation. Man sagt auch: „Eine Mannschaft hat einen Trainer." Im abgebildeten Klassendiagramm sind beide Seiten der Assoziationsbeziehung mit Kardinalitäten beschrieben. Eine Mannschaft hat zehn oder mehr Spieler und umgekehrt gehört ein Spieler immer nur zu einer Mannschaft. Dabei soll in unserer Anwendung lediglich die Mannschaft ihre Spieler kennen, was mit dem Pfeil in Richtung der Klasse Player gekennzeichnet wird. Kennen heißt in diesem Zusammenhang, dass Objekte der Klasse Team Methoden auf ihren Player-Objekten aufrufen werden, was umgekehrt, also dass ein Spieler Methoden seines Mannschaftsobjekts aufrufen wird, nicht nötig sein wird.

1) Kopiere das Package de.szut.soccer3 und nenne die Kopie de.szut.soccer4.

2) Erstelle in diesem Package eine neue Klasse mit dem Bezeichner Team.

3) Die eingezeichnete Assoziationsbeziehung besagt, dass eine Mannschaft einen Trainer besitzt und sie ihren Trainer kennt. Diese Beziehung wird über ein Attribut in der Klasse Team vom Typ Coach realisiert. Analog geschieht das mit der Beziehung der Mannschaft zum Torwart. Füge der Klasse Team neben dem Attribut für ihren Namen eines für den Trainer und den Torwart hinzu (vgl. Klas-sendiagramm oben).

4) Eine Mannschaft hat während eines Spiels zwar immer nur zehn Feldspieler auf dem Rasen, da unsere Anwendung aber auch Ersatzspieler berücksichtigen soll, können es auch mehr sein. Des-wegen speichern wir die Spieler nicht etwa in einem Array der Größe 10, sondern in einer Liste. Listen speichern Objektdatentypen und können beliebig groß werden. Java bietet verschiedene Typen von Listen an, die sich in ihrer Speicherstrategie unterscheiden. Wir verwenden eine Array-List. Bei der Deklaration wird der ArrayList mitgegeben, was für Objekte später in ihr gespeichert werden sollen:

private ArrayList<Player> squad;

5) Implementiere den Konstruktor für die Klasse Team. Der Konstruktor soll den Namen der Mann-schaft, den Trainer und den Torwart als Parameter erhalten und speichern.

Achte darauf, dass die Liste der Spieler bisher nur deklariert wurde. Würde man nun versuchen sie zu benutzen und z.B. einen Spieler in ihr speichern, bekäme man eine Fehlermeldung (NullPointerExcep-tion). Füge dem Konstruktor daher folgende Zeile hinzu:

this.squad=new ArrayList<Player>();

Da die Spielerliste nach außen nicht sichtbar ist, wird noch eine public-Methode benötigt, die der Spie-lerliste einen Spieler hinzufügt:

public void addPlayer(Player player) { this.squad.add(spieler) }

So ist die Liste immer noch vor Zugriff von außen geschützt, aber dennoch können Spieler hinzugefügt werden.

Exkurs

Bei der Beziehung zwischen der Klasse Team und der Klasse ArrayList handelt es sich um eine besondere Form einer Hat-Ein-Bezie-hung: eine Ganzes-Teil-Beziehung, in der das Teil vom Ganzen existenzabhängig ist. Bezie-hungen, die diese Eigenschaft haben, nennt man Kompositionen. Das Ganze ist die Klasse Team. Sie beinhaltet als ein Teil von sich ein Listenobjekt. Diese ist insofern von Team existenzabhängig, weil sie sich genauso wie das Ganze, also das jeweilige Team-Objekt, verhält: wird es kopiert, wird auch die Liste kopiert; wird es gelöscht, wird auch die Liste gelöscht… Am Quellcode erkennt man eine Kompositionsbeziehung daran, dass das Ganze, also die Klasse Team, für die Instan-ziierung seiner Teile verantwortlich ist. Das passiert hier im Konstruktor. Bei Assoziationsbeziehungen werden Konstruktoren oder Methoden bereits existierende Objekte übergeben!

6) Erstelle in der Klasse Team eine Methode zum Ermitteln der Motivation der Gesamtmannschaft. Nenne die Methode getTotalMotivation().

Die Motivation der Gesamtmannschaft ergibt sich dabei als Mittelwert der Motivationswerte aller Spieler, inklusive Torwart. Dieser Wert wird immer auf die nächste ganze Zahl abgerundet.

Ein paar Tipps dazu:

· Alle Spieler durchlaufen

o Du wirst dazu eine Schleife benötigen, mit der du schrittweise auf jeden einzelnen Spieler zugreifst. Um dies mit den dir bekannten Mitteln zu bauen benötigst du zwei Dinge:

§ Gesamtlänge der Liste: this.squad.size()

§ Wie greife ich auf einen einzelnen Spieler der Liste zu:

· this.squad.get(0) à der erste Spieler

· this.squad.get(1) à der zweite Spieler

· usw.

o Jetzt müsstest du nur eine Schleife bauen, die z.B. eine Variable index schrittweise hoch-zählt (erst 0, dann 1, dann 2, etc).

o Zu Beginn eines jeden Durchlaufs holst du dir anhand der Variablen index das entspre-chende Spielerobjekt aus der Liste.

· Zugriff auf die Motivation eines Spielers

o Momentan können wir die Motivation eines Spielers nur über die toString()-Me-thode (indirekt) ermitteln. Einen direkten Zugriff hast du nicht, da das Attribut private ist. Du könntest das Attribut natürlich mittels public öffentlich sichtbar machen, aber das widerspräche dem Prinzip der Datenkapselung.

o Erstelle also einen sogenannten Getter für das Attribut motivation in der Klasse Player:

public class Player { private int motivation; …. public int getMotivation() { return this.motivation; } }

o Durch ihn kann man von außen auf den Inhalt des Attributs zugreifen. Du hättest ihn na-türlich auch direkt bei der Erstellung der Klasse Player anlegen können, aber es ist durchaus guter Stil erst dann Getter (und evtl. auch Setter) anzulegen, wenn man sie be-nötigt.

7) Ergänze die Klasse Team in ähnlicher Weise mit einer Methode zum Ermitteln der Spielstärke der Gesamtmannschaft. Nenne diese Methode entsprechend getTotalForce(). Die Gesamt-stärke soll dieses Mal allerdings nur aus den Spielern ermittelt werden, die auch tatsächlich auf dem Platz stehen, d.h. dem Torwart und den ersten zehn Spieler der Liste.

8) Ergänze die Klasse Team um eine toString()-Methode. Ihr Rückgabewert könnte zum Beispiel so aussehen:

***Mannschaft*** Trainer: Terzic Torhüter: Bürki Spieler: Meunier Spieler: Akanji Spieler: Hummels Spieler: Guerreiro Spieler: Witsel Spieler: Brandt Spieler: Sancho Spieler: Bellingham Spieler: Reus Spieler: Haaland

Tipps:

· Du wirst für die Spieler eine Schleife benötigen!

· Du wirst einen weiteren Getter erstellen müssen, um an die Namen des Trainers und der Spieler zu kommen.

· Wenn du in einem String die Zeichen \n benutzt, bewirkt das bei der Ausgabe einen Zeilenum-bruch.

System.out.println("Hallo\nWelt\n!"); à

· Beginne damit, eine Variable String result="***Mannschaft***\n"; zu definieren. Die-ser fügst du dann Stück für Stück die weiteren Infos hinzu. Z.B. result = result +"Trainer: "+this.coach.getName()+"\n";

9) Teste deinen Code, indem du in deiner Programm-Klasse der main-Methode folgenden Code hin-zufügst:

Coach coach = new Coach("Terzic", 38, 5); Goalkeeper goalkeeper = new Goalkeeper("Bürki", 30, 7, 2, 10, 7); Team dortmund = new Team("Borussia Dortmund", coach, goalkeeper); dortmund.addPlayer(new Player("Meunier", 29, 7, 5, 8, 0)); dortmund.addPlayer(new Player("Akanji", 25, 8, 6, 8, 0)); dortmund.addPlayer(new Player("Hummels", 31, 9, 5, 8, 0)); dortmund.addPlayer(new Player("Guerreiro", 26, 8, 9, 8, 0)); dortmund.addPlayer(new Player("Witsel", 31, 9, 6, 8, 0)); dortmund.addPlayer(new Player("Brandt", 24, 9, 8, 8, 0)); dortmund.addPlayer(new Player("Sancho", 20, 10, 8, 8, 0)); dortmund.addPlayer(new Player("Bellingham", 17, 7, 7, 7, 0)); dortmund.addPlayer(new Player("Reus", 31, 10, 8, 8, 0)); dortmund.addPlayer(new Player("Haaland", 20, 9, 9, 8, 0)); System.out.println(dortmund.toString()); System.out.println("Mannschaftsstärke: " + dortmund.getTotalForce()); System.out.println("Motivation: "+ dortmund.getTotalMotivation());

Dies sollte folgende Ausgabe bewirken:

***Mannschaft***

Trainer: Terzic

Torhüter: Bürki

Spieler: Meunier

Spieler: Akanji

Spieler: Hummels

Spieler: Guerreiro

Spieler: Witsel

Spieler: Brandt

Spieler: Sancho

Spieler: Bellingham

Spieler: Reus

Spieler: Haaland

Mannschaftsstärke: 8

Motivation: 8

10) Effektiver als über die Konsole können die Methoden getTotalMotivation() und getTo-talForce() wiederum über Unit-Tests getestet werden. Schreibe daher eine Klasse TeamTest und implementiere jeweils einen Unit-Test, um die Methoden zu testen. Tipp: Deine Tests könnten ganz ähnlich wie der unter 9) abgebildete Quellcode aussehen. Die println-Anweisungen sind le-diglich durch den jeweiligen Methodenaufruf und durch eine geeignete Assertion zu ersetzen.

11) Deine Tests weisen nun einiges an Codeduplizierung auf: Der Code zum Aufbau des Testarrange-ments, also die Instanziierung des Trainers, des Torhüters, der Spieler und der Mannschaft, sowie das Hinzufügen zur Mannschaft, sind in beide Tests gleich. Diese Codeduplizierung kann wie folgt eliminiert werden:

public class TeamTest { private Team dortmund; @BeforeEach public void setUp(){ //Arrange Coach coach = new Coach("Terzic", 38, 5);

Goalkeeper goalkeeper = new Goalkeeper("Bürki", 30, 7, 2, 10, 7); dortmund = new Team("Borussia Dortmund", coach, goalkeeper); dortmund.addPlayer(new Player("Meunier", 29, 7, 5, 8, 0)); … } @Test public void testGetTotalMotivation(){ //Act int totalMotivation = dortmund.getTotalMotivation(); //Assert assertEquals(8, totalMotivation); } … }

In einem Fußballspiel spielt die Heimmannschaft gegen eine Aus-wärtsmannschaft. An einem Fußballspiel sind also zwei Mann-schaften beteiligt. Die Klasse Game, die in unserer Anwendung ein Fußballspiel modelliert, braucht Zugriff auf die am Spiel be-teiligten Mannschaften, weswegen sie beide Mannschaften in Instanzvariablen referenziert. Außer-dem speichert sie die von beiden Mannschaften erzielten Treffer.

12) Implementiere die Klasse Game mit ihrer Assoziationsbeziehung zur Klasse Team und den beiden weiteren Instanzvariablen. Implementiere dabei einen Konstruktor, der die am Spiel beteiligten Mannschaften übergeben bekommt.

13) Die toString-Methode liefert einen String der Begegnung nach folgenden Muster zurück:

Borussia Dortmund - Werder Bremen

Da das Attribut name in der Klasse Team mit dem Modifizierer private versehen ist, musst du in der Klasse Team einen entsprechenden Getter bereitstellen.

14) In der Spielklasse benötigen wir je eine Methode zum Hochzählen der Tore der Heim- und eine zum Hochzählen der Tore der Gastmannschaft. Die jeweilige Methode wird dann bei jedem Treffer aufgerufen.

15) Teste abschließend deine Anwendung mithilfe der Klasse SoccerManagerUI. Erstelle eine zweite Mannschaft. Dafür kannst du den abgebildeten Quellcode kopieren:

coach = new Coach("Kohfeld", 38, 9); goalkeeper = new Goalkeeper("Pavlenka", 28, 6, 2, 10, 6); Team werder = new Team("Werder Bremen", coach, goalkeeper); werder.addPlayer(new Player("Gebre Selassie", 34, 7, 6, 8, 0)); werder.addPlayer(new Player("Friedl", 22, 6, 6, 8, 0)); werder.addPlayer(new Player("Veljkovic", 24, 6, 5, 8, 0)); werder.addPlayer(new Player("Augustinsson", 26, 7, 5, 7, 0)); werder.addPlayer(new Player("Mbom", 20, 6, 6, 8, 0)); werder.addPlayer(new Player("Eggestein", 24, 8, 6, 8, 0)); werder.addPlayer(new Player("Füllkrug", 27, 8, 9, 8, 0)); werder.addPlayer(new Player("Osako", 30, 7, 8, 8, 0));

werder.addPlayer(new Player("Rashica", 24, 8, 8, 8, 0)); werder.addPlayer(new Player("Bittencourt", 27, 7, 7, 8, 0));

Erstelle nun ein Spiel, das diese beiden Mannschaften spielen. Sorge dafür, dass im Spiel einige Tore fallen und lasse dir das Ergebnis auf der Konsole ausgeben